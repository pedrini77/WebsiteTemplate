---
AWSTemplateFormatVersion: '2010-09-09'
Description: Security Groups and Roles
Parameters:
  Source: 
    Description: Enter your IP. /32 means just your IP in CIDR notation.
    Type: String
    Default: GetYourIpFromWhatIsMyIp.com/32
Resources:
  SGInstances:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB in anything out
      VpcId:
        Fn::ImportValue: Network-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '31000'
        ToPort: '61000'
        SourceSecurityGroupId:
          Ref: SGLoadBalancer
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 
          Ref: Source
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  SGLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow browser connetion in
      VpcId:
        Fn::ImportValue: Network-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: 
          Ref: AWS::StackName
  SGMountTarget:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: Network-VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 
          Fn::ImportValue: Network-VPC-CIDR
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  RoleECSService:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:RegisterTargets
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            Resource: "*"
      RoleName: 
        Fn::Sub: "${AWS::StackName}-ECS"
  RoleAutoScaling:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService
            Resource: "*"
      RoleName:
        Fn::Sub: "${AWS::StackName}-AutoScaling"
  RoleEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - events:*
            - cloudwatch:*
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:*
            - elasticache:Describe*
            - elasticfilesystem:Describe*
            - logs:CreateLogStream
            - logs:PutLogEvents
            - rds:Describe*
            - s3:*
            Resource: "*"
      RoleName:
        Fn::Sub: "${AWS::StackName}-EC2"
  RoleLambdaECS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - edgelambda.amazonaws.com
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: lambda-service
        PolicyDocument:
          Statement:
          - Sid: Stmt1000000000009
            Effect: Allow
            Action:
            - ecs:*
            - ec2:*
            - cloudwatch:*
            - logs:*
            - autoscaling:*
            Resource:
            - "*"
      RoleName:
        Fn::Sub: "${AWS::StackName}-LambdaECS"
  InstanceProfileEC2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: RoleEC2
Outputs:
  SGInstances:
    Description: Base Security Group EC2 Instances
    Value:
      Ref: SGInstances
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SGInstances"
  SGLoadBalancer:
    Description: Base Security Group for Application Load Balancer
    Value:
      Ref: SGLoadBalancer
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SGLoadBalancer"
  SGMountTarget:
    Description: Base Security Group for MountTargets
    Value:
      Ref: SGMountTarget
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SGMountTarget"
  RoleECSService:
    Description: Role needed for ECS service
    Value:
      Fn::GetAtt:
      - RoleECSService
      - Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-${AWS::Region}-RoleECSService"
  RoleAutoscaling:
    Description: Role needed for ECS AutoScaling
    Value:
      Fn::GetAtt:
      - RoleAutoScaling
      - Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-${AWS::Region}-RoleAutoscaling"
  RoleLambdaECS:
    Description: Role needed for ECS AutoScaling
    Value:
      Fn::GetAtt:
      - RoleLambdaECS
      - Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-${AWS::Region}-RoleLambdaECS"
  InstanceProfileEC2:
    Description: Instance Profile for ECS Instance
    Value:
      Fn::GetAtt:
      - InstanceProfileEC2
      - Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-${AWS::Region}-InstanceProfileEC2"
