---
AWSTemplateFormatVersion: '2010-09-09'
Description: Shared Resources
Parameters:
  ConfigType:
    Description: Free only or Full (includes AutoScaling Increase alarms and Auto Scale In)
    Type: String
    AllowedValues:
    - FullConfig
    - SmallConfig
Conditions:
  FullConfig:
    Fn::Equals:
    - Ref: ConfigType
    - FullConfig
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${AWS::Region}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Ref: AWS::StackName
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: "/dev/xvdcz"
        Ebs:
          VolumeSize: '22'
          VolumeType: gp2
          DeleteOnTermination: 'true'
      IamInstanceProfile:
        Fn::ImportValue: Security-InstanceProfileEC2
      ImageId: ami-9eb4b1e5
      InstanceMonitoring: 'False'
      InstanceType: t2.micro
      KeyName: key
      SecurityGroups:
      - Fn::ImportValue: Security-SGInstances
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          curl -O https://bootstrap.pypa.io/get-pip.py
          # TO DO - Add EFS configuration
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      AvailabilityZones:
      - Fn::ImportValue: Network-AZPublic1
      - Fn::ImportValue: Network-AZPublic2
      Cooldown: '500'
      DesiredCapacity: '0'
      HealthCheckGracePeriod: '300'
      HealthCheckType: EC2
      MaxSize: '4'
      MinSize: '0'
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: 'True'
      VPCZoneIdentifier:
      - Fn::ImportValue: Network-SubnetPublic1
      - Fn::ImportValue: Network-SubnetPublic2
  PolicyScaleUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: '300'
      PolicyType: SimpleScaling
      ScalingAdjustment: '1'
  AlarmIncreaseCPUReservation:
    Type: AWS::CloudWatch::Alarm
    Condition: FullConfig
    Properties:
      EvaluationPeriods: '3'
      Statistic: Average
      Threshold: '80'
      AlarmName:
        Fn::Sub: "${AWS::StackName}-High-CPU-Reservation"
      AlarmDescription: Reserved CPU too high
      Period: '60'
      AlarmActions:
      - Ref: PolicyScaleUp
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: Cluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUReservation
  AlarmIncreaseMemoryReservation:
    Type: AWS::CloudWatch::Alarm
    Condition: FullConfig
    Properties:
      EvaluationPeriods: '3'
      Statistic: Average
      Threshold: '80'
      AlarmName:
        Fn::Sub: "${AWS::StackName}--High-Memory-Reservation"
      AlarmDescription: Reserved Memory too high
      Period: '60'
      AlarmActions:
      - Ref: PolicyScaleUp
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Ref: Cluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation
  LambdaECS:
    Type: AWS::Lambda::Function
    Condition: FullConfig
    Properties:
      Code:
        S3Bucket:
          Ref: S3Bucket
        S3Key: CloudFormation/ecscale.zip
      Description: Lambda function to scale in ECS clusters
      FunctionName: ECS-Scalein
      Handler: ecscale.lambda_handler
      MemorySize: 128
      Role:
        Fn::ImportValue: Security-RoleLambdaECS
      Runtime: python2.7
      Timeout: 120
      TracingConfig:
        Mode: PassThrough
      Tags:
      - Key: Name
        Value: 
          Ref: AWS::StackName
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: FullConfig
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - LambdaECS
        - Arn
      Principal: events.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
        - RuleLambda
        - Arn
  RuleLambda:
    Type: AWS::Events::Rule
    Condition: FullConfig
    DependsOn: LambdaECS
    Properties:
      Description: Trigger Scale In Lambda every hour at the half hour
      Name:
        Ref: AWS::StackName
      ScheduleExpression: cron(30 * * * ? *)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - LambdaECS
          - Arn
        Id: LambdaECS
Outputs:
  Cluster:
    Description: ECS Cluster
    Value:
      Ref: Cluster
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Cluster"
