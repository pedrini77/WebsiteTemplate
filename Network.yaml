---
AWSTemplateFormatVersion: '2010-09-09'
Description: Network Components to secure services
Parameters:
  ConfigType:
    Description: Specify FullConfig for a NAT Gateway (More Security, More Expensive)
    Type: String
    AllowedValues:
    - YesNAT
    - NoNAT
  Source: 
    Description: Enter your IP. /32 means just your IP in CIDR notation.
    Type: String
    Default: GetYourIpFromWhatIsMyIp.com/32
  Account:
    Type: String
    Default: production
Mappings:
  production:
    us-east-1:
      VPC: 10.77.0.0/16
      SubnetPublic1: 10.77.0.0/24
      SubnetPublic2: 10.77.1.0/24
      SubnetPrivate1: 10.77.2.0/24
      SubnetPrivate2: 10.77.3.0/24
Conditions:
  FullConfig:
    Fn::Equals:
    - Ref: ConfigType
    - YesNAT
Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  ACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  ACLInHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ACL
      RuleNumber: '104'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  ACLInHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ACL
      RuleNumber: '107'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  ACLInSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ACL
      RuleNumber: '110'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock:
        Ref: Source
      PortRange:
        From: '22'
        To: '22'
  ACLInSSHDeny:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ACL
      RuleNumber: '113'
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  ACLInAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ACL
      RuleNumber: '115'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  ACLOut:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: ACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  AClAssociationPublic1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublic1
      NetworkAclId:
        Ref: ACL
  ACLAssociationPublic2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublic2
      NetworkAclId:
        Ref: ACL
  ACLAssociationPrivate1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivate1
      NetworkAclId:
        Ref: ACL
  ACLssociationPrivate2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivate2
      NetworkAclId:
        Ref: ACL
  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - Ref: Account
        - Ref: AWS::Region
        - SubnetPublic1
      AvailabilityZone: us-east-1d
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - Ref: Account
        - Ref: AWS::Region
        - SubnetPublic2
      AvailabilityZone: us-east-1e
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - Ref: Account
        - Ref: AWS::Region
        - SubnetPrivate1
      AvailabilityZone: us-east-1d
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - Ref: Account
        - Ref: AWS::Region
        - SubnetPrivate2
      AvailabilityZone: us-east-1e
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  RoutePrivate:
    Type: AWS::EC2::Route
    Condition: FullConfig
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
  RouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublic1
      RouteTableId:
        Ref: RouteTablePublic
  RouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublic2
      RouteTableId:
        Ref: RouteTablePublic
  RouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivate1
      RouteTableId:
        Ref: RouteTablePrivate
  RouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetPrivate2
      RouteTableId:
        Ref: RouteTablePrivate
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - Ref: Account
        - Ref: AWS::Region
        - VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
    Metadata:
      AWS::CloudFormation::Designer:
        id: c481cacc-18be-4334-a998-7b44fb5cf759
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - ElasticIP
    Condition: FullConfig
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ElasticIP
        - AllocationId
      SubnetId:
        Ref: SubnetPublic2
  ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn:
    - VPC
    Condition: FullConfig
    Properties:
      Domain: vpc
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: DHCP-Options
  DHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId:
        Ref: DHCPOptions
      VpcId:
        Ref: VPC
Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPC"
  VPCCIDR:
    Description: VPC CIDR
    Value:
      Fn::GetAtt: 
      - VPC
      - CidrBlock
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPC-CIDR"
  SubnetPrivate1:
    Description: SubnetPrivate1
    Value:
      Ref: SubnetPrivate1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubnetPrivate1"
  SubnetPrivate2:
    Description: SubnetPrivate2
    Value:
      Ref: SubnetPrivate2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubnetPrivate2"
  SubnetPublic1:
    Description: SubnetPublic1
    Value:
      Ref: SubnetPublic1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubnetPublic1"
  SubnetPublic2:
    Description: SubnetPublic2
    Value:
      Ref: SubnetPublic2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubnetPublic2"
