---
AWSTemplateFormatVersion: '2010-09-09'
Description: Network Components to secure services
Parameters:
  ConfigType:
    Description: Enter the Environment Type (production, staging, uat, qa)
    Type: String
    AllowedValues:
    - FullConfig
    - SmallConfig
  EnvType:
    Description: Enter the Environment Type (production, staging, uat, qa)
    Type: String
    AllowedValues:
    - production
Mappings:
  CIDRMap:
    production:
      VPC: 10.77.0.0/16
      PublicSubnet1: 10.77.0.0/24
      PublicSubnet2: 10.77.1.0/24
      PrivateSubnet1: 10.77.2.0/24
      PrivateSubnet2: 10.77.3.0/24
      CORPSubnet: 10.77.4.0/24
Conditions:
  FullConfig:
    Fn::Equals:
    - Ref: ConfigType
    - FullConfig
Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHDenyNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl
  PrivateSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl
  PrivateSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - CIDRMap
        - Ref: EnvType
        - PublicSubnet1
      AvailabilityZone: us-east-1d
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - CIDRMap
        - Ref: EnvType
        - PublicSubnet2
      AvailabilityZone: us-east-1e
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - CIDRMap
        - Ref: EnvType
        - PrivateSubnet1
      AvailabilityZone: us-east-1d
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - CIDRMap
        - Ref: EnvType
        - PrivateSubnet2
      AvailabilityZone: us-east-1e
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Cluster of two private subnets
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: FullConfig
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - CIDRMap
        - Ref: EnvType
        - VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
    Metadata:
      AWS::CloudFormation::Designer:
        id: c481cacc-18be-4334-a998-7b44fb5cf759
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - ElasticIP
    Condition: FullConfig
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ElasticIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
  ElasticIP:
    Type: AWS::EC2::EIP
    DependsOn:
    - VPC
    Condition: FullConfig
    Properties:
      Domain: vpc
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
      - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: DHCP-Options
  DHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId:
        Ref: DHCPOptions
      VpcId:
        Ref: VPC
Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPC"
  PrivateSubnet1:
    Description: PrivateSubnet1
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet2:
    Description: PrivateSubnet2
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2"
  PublicSubnet1:
    Description: PublicSubnet1
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1"
  PublicSubnet2:
    Description: PublicSubnet2
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2"
  EnvType:
    Description: Environment Type
    Value:
      Ref: EnvType
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-EnvType"
